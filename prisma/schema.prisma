// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Degree {
  id                  String               @id @db.VarChar(36)
  fullName            String               @db.VarChar(100)
  shortName           String               @unique @db.VarChar(5)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  teachers            Teacher[]
  teacherCoefficients TeacherCoefficient[] // Relation to teacher coefficients
}

model Department {
  id          String    @id @db.VarChar(36)
  fullName    String    @db.VarChar(100)
  shortName   String    @unique @db.VarChar(50)
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  teachers    Teacher[]
  subjects    Subject[]
}

model Teacher {
  id           String             @id @db.VarChar(36)
  code         String             @unique @db.VarChar(20)
  fullName     String             @db.VarChar(100)
  dateOfBirth  DateTime           @db.Date
  phone        String?            @db.VarChar(20)
  email        String?            @db.VarChar(100)
  department   Department         @relation(fields: [departmentId], references: [id])
  departmentId String             @db.VarChar(36)
  degree       Degree             @relation(fields: [degreeId], references: [id])
  degreeId     String             @db.VarChar(36)
  assignments  TeacherAssignment[] // Relation to teacher assignments
  user         User?              // Optional relation to user account
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Subject {
  id               String       @id @db.VarChar(36)
  code             String       @unique @db.VarChar(20) // Format: DeptShortName + 2 digits (e.g., CNTT01)
  name             String       @db.VarChar(200)
  credits          Int          // Số tín chỉ
  coefficient      Float        // Hệ số học phần  
  totalPeriods     Int          // Số tiết
  department       Department   @relation(fields: [departmentId], references: [id])
  departmentId     String       @db.VarChar(36)
  courseClasses    CourseClass[] // Relation to course classes
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Semester {
  id            String        @id @db.VarChar(36)
  termNumber    Int           // Số kỳ (1, 2, 3)
  isSupplementary Boolean     @default(false) // Có phải kỳ phụ không
  academicYear  String        @db.VarChar(20)     // Năm học (VD: "2024-2025")
  startDate     DateTime      @db.Date            // Ngày bắt đầu
  endDate       DateTime      @db.Date            // Ngày kết thúc
  courseClasses CourseClass[] // Relation to course classes
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([academicYear, termNumber, isSupplementary]) // Không được trùng kỳ và năm học
}

model CourseClass {
  id            String              @id @db.VarChar(36)
  code          String              @db.VarChar(30) // Format: SubjectCode-Term-Year(Nxx) (e.g., CNTT01-1-26(N01))
  name          String              @db.VarChar(250)        // Format: "Tên học phần (Nyy)"
  studentCount  Int                 @default(0)             // Số sinh viên
  maxStudents   Int                 @default(40)            // Số sinh viên tối đa
  classNumber   Int                             // Số thứ tự lớp (01, 02, ...)
  subject       Subject             @relation(fields: [subjectId], references: [id])
  subjectId     String              @db.VarChar(36)
  semester      Semester            @relation(fields: [semesterId], references: [id])
  semesterId    String              @db.VarChar(36)
  assignments   TeacherAssignment[] // Relation to teacher assignments
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@unique([code, semesterId]) // Không được trùng mã lớp trong cùng kỳ học
  @@unique([subjectId, semesterId, classNumber]) // Không được trùng môn học, kỳ học và số lớp
}

model TeacherAssignment {
  id            String      @id @db.VarChar(36)
  teacher       Teacher     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId     String      @db.VarChar(36)
  courseClass   CourseClass @relation(fields: [courseClassId], references: [id], onDelete: Cascade)
  courseClassId String      @db.VarChar(36)
  assignedDate  DateTime    @db.Date
  status        String      @default("active") @db.VarChar(20) // active, inactive, completed
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([teacherId, courseClassId]) // Một giáo viên chỉ được phân công một lần cho một lớp
  @@index([teacherId])
  @@index([courseClassId])
  @@index([assignedDate])
}

// Định mức tiền theo tiết cho từng năm học
model HourlyRate {
  id                String   @id @db.VarChar(36)
  academicYear      String   @unique @db.VarChar(20) // Năm học (VD: "2024-2025")
  ratePerHour       Float    // Số tiền cho một tiết (VNĐ)
  establishedDate   DateTime @default(now()) // Ngày thiết lập
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Hệ số giáo viên theo bằng cấp cho từng năm học
model TeacherCoefficient {
  id            String @id @db.VarChar(36)
  academicYear  String @db.VarChar(20) // Năm học (VD: "2024-2025")
  degree        Degree @relation(fields: [degreeId], references: [id])
  degreeId      String @db.VarChar(36)
  coefficient   Float  // Hệ số (1.3, 1.5, 1.7, 2.0, 2.5)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([academicYear, degreeId]) // Không được trùng năm học và bằng cấp
}

// Hệ số lớp theo số sinh viên chuẩn cho từng năm học
model ClassCoefficient {
  id                     String @id @db.VarChar(36)
  academicYear           String @unique @db.VarChar(20) // Năm học (VD: "2024-2025")
  standardStudentRange   String @db.VarChar(20) // Khoảng số sinh viên chuẩn (VD: "40-49")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

// User authentication and authorization
model User {
  id          String   @id @db.VarChar(36)
  username    String   @unique @db.VarChar(50)  // Mã giáo viên hoặc username custom
  password    String   @db.VarChar(255)         // Hashed password
  role        UserRole                          // Enum role
  isActive    Boolean  @default(true)           // Trạng thái tài khoản
  teacher     Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId   String?  @unique @db.VarChar(36)  // Optional - chỉ có với role TEACHER
  lastLogin   DateTime?                         // Lần đăng nhập cuối
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([username])
  @@index([role])
}

enum UserRole {
  ADMIN
  FACULTY_MANAGER
  ACCOUNTANT
  TEACHER
}
